question
Zane has just received an array  of length . Because of his endless curiosity, he has decided to play with this array by applying some operations to it. Needless to say, your task is to perform these operations for him, as there will be a lot of them.

In one operation, Zane chooses some segment of array  and increases the values of numbers in that segment by some number of his choice. However, he has  favorite numbers, so as an exception, he will not add anything to those numbers, not even if they are in the segment he chooses.

For example, let's assume  and Zane's favorite numbers are  and . Suppose he wants to add to the segment . Then the array  would become . Note that  and  do not change, because they are his favorite numbers.

Given the elements of array , a set  containing Zane's  favorite numbers, and  operations, find the sum of all numbers in array  after each operation.

Input Format

The first line contains three space-separated integers , , and .

The second line contains  space-separated integers, describing the array .

The third line contains  space-separated distinct integers, describing the set .

The th of the next  lines contains three space-separated integers , , and , respectively, meaning that the th operation is performed on the segment  with  as the value to add.

Constraints

For all operations,  and  hold.
Subtasks

For  of the maximum points, 
Output Format

Print  lines, the th of which contains a single integer that denotes the sum of all elements of  after the th operation.

Sample Input 0

5 2 2
5 3 2 4 1
3 4
1 4 1
1 5 3
Sample Output 0

17
23
Explanation 0

Initially, we have . The  favorite numbers of Zane are  and , just as described in the set . After each of the two operations,  becomes  and , respectively.

Sample Input 1

3 1 1
1 2 3
1000000000
1 2 3
Sample Output 1

12



my solution
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        BigInteger big=BigInteger.ONE;
        int m = in.nextInt();
        int k = in.nextInt();
        long[] A = new long[n];
        ArrayList<Long> arr=new ArrayList<Long>();
        for(int A_i = 0; A_i < n; A_i++){
            A[A_i] = in.nextLong();
             big=  big.add(BigInteger.valueOf(A[A_i]));
        }
        long[] S = new long[k];
        for(int S_i = 0; S_i < k; S_i++){
            S[S_i] = in.nextLong();
            arr.add(S[S_i]);
        }
        for(int a0 = 0; a0 < m; a0++){
            int l = in.nextInt();
            int r = in.nextInt();
            int x = in.nextInt();
            // Write Your Code Here
             for(int i=l-1;i<r;i++)
            {
                if(!arr.contains(A[i]))
                {                    A[i]+=x;
                  big=  big.add(BigInteger.valueOf(x));
            }
             }
            
              
         //   for(int i=0;i<n;i++)
           // {
             // big=  big.add(BigInteger.valueOf(A[i]));
           // }
            System.out.println(big.subtract(BigInteger.valueOf(1)));
        }
        in.close();
    }
}
