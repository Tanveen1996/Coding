A permutation of length n is an array of size n consisting of n distinct integers in the range [1, n]. For example, (3, 2, 4, 1) is a permutation of length 4, but (3, 3, 1, 4) and (2, 3, 4, 5) are not, as (3, 3, 1, 4) contains duplicate elements, and (2, 3, 4, 5) contains elements not in range [1,4].

A permutation p of length n is good if and only if for any 1 ≤ i ≤ n, pi ≠ i.

Please find the lexicographically smallest good permutation p.

Definition for "lexicographically smaller":

For two permutations p and q, we say that p is lexicographically smaller than q if and only if there exists a index 1 ≤ l ≤ n such that:

For any 1 ≤ i < l, pi = qi. Note that if l = 1, this constraint means nothing.
and, pl < ql.
For example, (2, 3, 1, 4) < (2, 3, 4, 1) < (3, 4, 1, 2). The lexicographically smallest permutation is, of course, (1, 2, ..., n), though this one is not good.

Input
First line of the input contains an integer T denoting number of test cases.

For each test case, the only line contains an integer n.

Output
For each test case, output the lexicographically smallest good permutation of length n. It's guaranteed that this permutation exists.

Constraints
1 ≤ T ≤ 10
2 ≤ n ≤ 105
Subtasks
Subtask #1 (17 points): 2 ≤ n ≤ 9
Subtask #2 (83 points): Original Constraints
Example
Input:
4
2
3
5
6

Output:
2 1
2 3 1
2 1 4 5 3
2 1 4 3 6 5


my solution
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Scanner;
 
class MINPERM {
 
	public static void main(String[] args) {
		 Scanner sc = new Scanner(System.in);
		    int a=sc.nextInt();
		     int p=1;
		 
		     while(p<=a)
		     {
                int n=sc.nextInt();
                int arr[]=new int[n];
                
                for(int i=0;i<n-2;i++)
                {
                	if(i%2==0)
                	{
                		arr[i]=i+2;
                	}
                	else
                	{
                		arr[i]=i;
                	}
                }
                int first;
                int second;
                if(n%2==0)
                {
                	 arr[n-2]=n;
                	 arr[n-1]=n-1;
//                	 second=n-1;
                }else
                {
//                	first=n;
                	arr[n-2]=n;
                	arr[n-1]=n-2;
                }
         for(int j=0;j<n;j++)
         {
        	 System.out.print(arr[j]+" ");
         }
         System.out.println();
		    	 p++;
		     }
       sc.close();
	}
	
}
