Fehc is Chef's best friend. They grew up with each other, and often help each other with competitive programming.

Chef is participating in a programming contest prepared by Fehc and finds the following problem in Fehc's problem set: given a string s[1..N], count the number of pairs of indices 1 ≤ i ≤ j ≤ N such that s[i..j] is palindrome and j-i is even. The characters that may appear in s are 0, 1, 2, ..., 109.

Chef doesn't know the solution, but he knows Fehc's habits of creating test data. When preparing data for a string problem, Fehc always generates a string of N 0's, and replaces some of the 0's by other characters. Thus, Chef assumes that there are only K nonzero characters in s, and K is usually much smaller than N.

Given this useful information, can you help Chef solve this problem?

Input
The first line of input contains one integer T denoting the number of test cases.
For each test case, the first line contains two space-separated integers N and K.
K lines follow; the i-th of these lines contains two space-separated integers pi and qi, meaning that the i-th nonzero character is s[pi] = qi.
Output
For each test case, output one integer denoting the answer to the problem.

Constraints
1 ≤ T ≤ 10
1 ≤ N ≤ 109
0 ≤ K ≤ 105
1 ≤ p1 < p2 < ... < pK ≤ N
1 ≤ qi ≤ 109
Subtask #1 (9 points):

N ≤ 1000
Subtask #2 (14 points):

N ≤ 105
Subtask #3 (21 points):

K ≤ 1000
Subtask #4 (56 points):

original constraints
Example
Input:
3
7 2
5 1
6 1
7 3
2 1
4 2
6 1
10 0

Output:
9
12
30



my solution

import java.util.Scanner;
 
public class Main {
   
	public static void main(String[] args) {
		// TODO Auto-generated method stub
 
	     Scanner sc = new Scanner(System.in);
	     int a=sc.nextInt();
	     int p=1;
	     while(p++<=a)
	     {
	    	 long ans=0;
          int size=sc.nextInt();
          String arr[]=new String[size];
         
          for(int i=0;i<arr.length;i++)
          {
        	arr[i]=0+"";  
          }
          int iterate=sc.nextInt();
          
          for(int i=0;i<iterate;i++)
          {
        	  int pos=sc.nextInt();
        	  long ele=sc.nextLong();
        	  arr[pos-1]=ele+"";
          }
          ans+=size;
          int j=0,k=0;
          for(int i=0;i<arr.length;i++)
          {
        	  j=i;
        			  k=i;
        	  
        	  while(j>=0  && k<arr.length && arr[j].equals(arr[k]))
        	  {
        		  if(i!=j)
        			  ans++;
        		  k++;
        		  j--;
        	  }
          }
          
          
          System.out.println(ans);
	    	 
	    	 
	     }
	     sc.close();
	}
 
}
 

